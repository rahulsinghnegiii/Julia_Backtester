# TODO: Fix Inverse Volatility Tests (Abdullah)
module ComposerTestModule
include("../../../Main.jl")
include("../../../BacktestUtils/BacktestUtils.jl")
include("../../../BacktestUtils/ReturnCalculations.jl")
using Test, Dates, DataFrames
using .VectoriseBacktestService
using .VectoriseBacktestService.GlobalServerCache
using .VectoriseBacktestService.Types
initialize_server_cache()
using .BacktestUtilites
using .ReturnCalculations

function compare_delta_curve_easy()
    composer_api_call_data::Vector{Float32} = [
        0.23,
        0.38,
        -0.05,
        0.11,
        0.37,
        -0.56,
        -0.82,
        -0.25,
        -0.16,
        0.64,
        -0.63,
        -0.24,
        2.14,
        0.32,
        0.34,
        1.5,
        -2.43,
        1.35,
        0.64,
        -0.85,
        1.24,
        -0.19,
        -0.68,
        -0.49,
        1.18,
        -0.81,
        -0.57,
        0.62,
        -0.84,
        -0.48,
        0.5,
        -0.34,
        0.12,
        -0.85,
        -0.1,
        1.29,
        0.15,
        2.69,
        0.91,
        1.64,
        1.59,
        -0.36,
        -0.07,
        1.15,
        0.26,
        0.3,
        -1.02,
        -0.76,
        0.73,
        1.13,
        -0.66,
        -0.04,
        1.2,
        -0.82,
        0.08,
        -0.6,
        -0.9,
        0.55,
        -0.28,
        -0.35,
        0.56,
        1.39,
        -0.68,
        0.32,
        0.48,
        1.35,
        1.21,
        -0.5,
        0.03,
        0.33,
        1.03,
        3.55,
        -0.2,
        -0.48,
        0.04,
        -0.71,
        1.25,
        0.75,
        -0.42,
        -1.62,
        -1.65,
        -2.28,
        1.92,
        -1.48,
        0.86,
        0.63,
        -0.17,
        -1.22,
        0.36,
        1.48,
        -0.78,
        -1.01,
        0.44,
        0.05,
        0.62,
        2.73,
        1.05,
        0.16,
        -0.93,
        0.98,
        0.25,
        0.54,
        -0.36,
        0.22,
        0.46,
        0.04,
        -0.43,
        -0.55,
        0.18,
        0.2,
        -0.77,
        1.05,
        -0.15,
        0.58,
        -0.35,
        -0.69,
        0.0,
        -0.24,
        1.3,
        -0.09,
        0.69,
        0.07,
        -1.22,
        -2.82,
        0.61,
        -0.26,
        -0.53,
        1.68,
        0.03,
        0.08,
        0.21,
        1.84,
        -1.58,
        0.32,
        0.42,
        0.43,
        -0.09,
        0.8,
        -0.78,
        0.81,
        -0.28,
        -0.37,
        0.88,
        1.2,
        1.28,
        0.53,
        0.28,
        0.29,
        0.13,
        -0.07,
        0.34,
        -0.64,
        -0.26,
        -0.1,
        -0.27,
        -0.36,
        -0.18,
        -0.23,
        1.93,
        0.13,
        -1.26,
        0.07,
        -0.02,
        0.31,
        -0.3,
        0.13,
        0.8,
        0.18,
        0.22,
        0.13,
        0.15,
        -0.27,
        -0.31,
        -0.11,
        -2.39,
        -0.52,
        0.04,
        -0.63,
        2.31,
        0.39,
        0.03,
        0.11,
        -0.16,
        0.08,
        -0.06,
        0.18,
        -0.39,
        0.18,
        0.04,
        0.4,
        0.51,
        -0.13,
        -0.06,
        0.3,
        -0.01,
        0.3,
        -0.79,
        0.07,
        0.88,
        -0.47,
        -0.93,
        0.26,
        2.98,
        1.13,
        -0.38,
        1.42,
        -0.04,
        0.01,
        -1.05,
        -0.52,
        -0.09,
        -0.13,
        0.04,
        0.54,
        2.02,
        0.55,
        -0.25,
        -0.44,
        -0.33,
        -0.58,
        0.54,
        1.68,
        -0.19,
        -0.58,
        0.54,
        -0.34,
        0.07,
        -0.02,
        1.02,
        0.57,
        -0.23,
        0.73,
        0.06,
        -0.34,
        0.54,
        -1.95,
        -0.15,
        0.5,
        -0.05,
        0.36,
        -0.15,
        -0.84,
        -0.1,
        -0.06,
        -0.48,
        0.2,
        0.32,
        0.46,
        -0.16,
        1.23,
        -0.01,
        -1.1,
        1.21,
        -2.9,
        -0.74,
        2.34,
        0.75,
        -0.03,
        -0.61,
        -0.27,
        -0.32,
        1.6,
        0.79,
        0.62,
        0.19,
        -0.05,
        1.13,
        -1.17,
        -0.43,
        0.56,
        0.29,
        0.32,
        -0.41,
        -0.11,
        -0.07,
        -0.05,
        0.24,
        -0.06,
        -0.43,
        -0.02,
        -0.17,
        0.0,
        -0.38,
        0.56,
        -0.86,
        0.54,
        -1.86,
        0.97,
        0.8,
        0.83,
    ]
    strategy_path = "./App/Tests/SmokeTests/NodeTests/ComposerTestEasy.json"
    strategy_data::Dict{String,Any} = read_json_file(strategy_path)

    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()

    profile_history, trading_dates, min_days, flow_count, flow_stocks = execute_backtest(
        strategy_data,
        300,
        Date("2024-05-30"),
        price_cache,
        length(composer_api_call_data) + 1,
    )

    return_curve::Vector{Float32} = calculate_final_return_curve(
        profile_history, trading_dates, min_days, Date("2024-05-30"), price_cache, DayData()
    )
    # Multiply by 100 because composer does too
    return_curve = return_curve .* 100
    return_curve = round.(return_curve, digits=2)
    @testset "Easy Composer Test" begin
        for i in min(length(return_curve), length(composer_api_call_data))
            @test isapprox(return_curve[i], composer_api_call_data[i], atol=0.1)
        end
    end
end

function compare_delta_curve_china()
    composer_api_call_data::Vector{Float32} = [
        0.0,
        3.7,
        -3.2,
        3.4,
        -8.9,
        13.8,
        -4.8,
        13.6,
        1.4,
        -3.4,
        5.4,
        5.9,
        2.8,
        -4.6,
        -2.7,
        -2.4,
        5.5,
        7.4,
        8.2,
        13.3,
        2.7,
        4.6,
        -1.4,
        0.0,
        4.4,
        -4.1,
        -2.1,
        6.7,
        -8.4,
        2.0,
        3.8,
        -2.4,
        -7.0,
        0.1,
        5.7,
        8.0,
        -2.4,
        3.5,
        -3.1,
        2.9,
        4.6,
        -0.8,
        -4.6,
        -0.4,
        -0.3,
        0.2,
        0.5,
        -5.4,
        -3.9,
        -6.2,
        1.4,
        12.9,
        1.6,
        1.6,
        5.9,
        -1.9,
        6.2,
        1.9,
        5.0,
        -2.4,
        -5.9,
        3.7,
        8.6,
        -6.4,
        0.4,
        -2.2,
        -8.7,
        0.2,
        5.2,
        1.7,
        6.6,
        -0.6,
        4.8,
        -0.3,
        5.0,
        -3.2,
        -4.2,
        4.3,
        -15.9,
        -4.0,
        7.3,
        9.4,
        -7.7,
        3.8,
        1.4,
        5.8,
        -1.2,
        -2.5,
        9.0,
        -0.4,
        0.7,
        6.7,
        4.7,
        -2.1,
        -3.9,
        0.1,
        -1.9,
        -4.3,
        3.4,
        0.9,
        6.1,
        -2.0,
        -4.1,
        6.6,
        3.9,
        -0.3,
        8.1,
        -0.7,
        0.7,
        0.3,
        -3.3,
        -0.5,
        1.2,
        1.3,
        -1.1,
        2.2,
        6.5,
        -10.5,
        -4.4,
        4.2,
        -0.5,
        1.5,
        -2.8,
        1.7,
        7.4,
        2.4,
        1.7,
        6.1,
        1.8,
        1.3,
        3.0,
        -5.3,
        -2.3,
        2.1,
        -2.4,
        4.7,
        5.1,
        6.4,
        2.3,
        9.4,
        -5.8,
        0.1,
        -9.2,
        3.2,
        -4.2,
        -1.5,
        2.8,
        14.2,
        -5.9,
        6.3,
        -8.3,
        -12.3,
        0.7,
        1.8,
        15.8,
        1.1,
        11.1,
        10.5,
        3.8,
        -6.1,
        2.7,
        3.4,
        1.7,
        -0.8,
        3.4,
        6.6,
        8.8,
        4.9,
        1.5,
        2.8,
        3.5,
        -4.6,
        1.8,
        -4.8,
        -14.0,
        -5.4,
        -0.9,
        -4.9,
        -7.6,
        12.9,
        7.0,
        10.4,
        -6.1,
        -4.6,
        -0.4,
        5.3,
        -3.1,
        6.5,
        3.9,
        0.6,
        -13.8,
        -0.7,
        3.4,
        6.9,
        -0.4,
        -4.5,
        -2.6,
        4.5,
        0.1,
        -6.6,
        -1.0,
        -8.3,
        -0.7,
        2.5,
        3.8,
        6.6,
        2.1,
        0.6,
        -3.3,
        1.1,
        -17.2,
        6.3,
        -3.6,
        -6.1,
        -6.9,
        14.3,
        -6.2,
        -6.8,
        0.3,
        2.1,
        -8.1,
        -5.5,
        -1.8,
        2.3,
        -4.9,
        3.9,
        9.1,
        -9.6,
        2.3,
        3.9,
        1.9,
        -4.1,
        0.5,
        -6.7,
        6.4,
        -0.9,
        5.9,
        2.0,
        -0.6,
        2.0,
        -2.9,
        1.4,
        4.4,
        -0.4,
        -1.5,
        0.5,
        0.1,
        3.2,
        -2.3,
        1.7,
        1.8,
        1.5,
        -2.0,
        -2.8,
        1.6,
        -2.4,
        9.9,
        -0.8,
        3.2,
        0.5,
        5.1,
        -0.2,
        4.2,
        -4.8,
        -5.3,
        -2.1,
        -5.0,
        -2.7,
        6.4,
        -1.8,
        16.5,
        2.5,
        -0.6,
        -3.8,
        -1.5,
        6.2,
        -3.2,
        -6.5,
        0.0,
        3.2,
        8.7,
        1.7,
        2.9,
        4.7,
        4.2,
        -6.1,
        -0.6,
        -1.1,
        5.6,
        0.0,
    ]
    strategy_path = "./App/Tests/SmokeTests/NodeTests/ComposerTestChina.json"
    strategy_data::Dict{String,Any} = read_json_file(strategy_path)

    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()

    profile_history, trading_dates, min_days, flow_count, flow_stocks = execute_backtest(
        strategy_data,
        300,
        Date("2024-05-30"),
        price_cache,
        length(composer_api_call_data) + 1,
    )

    return_curve::Vector{Float32} = calculate_final_return_curve(
        profile_history, trading_dates, min_days, Date("2024-05-30"), price_cache, DayData()
    )
    # Multiply by 100 because composer does too
    return_curve = return_curve .* 100
    return_curve = round.(return_curve, digits=1)
    @testset "China Composer Test" begin
        for i in min(length(return_curve), length(composer_api_call_data))
            @test isapprox(return_curve[i], composer_api_call_data[i], atol=0.1)
        end
    end
end

function compare_delta_curve_sortNodeStdReturn()
    strategy_path = "./App/Tests/SmokeTests/NodeTests/ComposerTest-front-vix-rot.json"
    strategy_data::Dict{String,Any} = read_json_file(strategy_path)

    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()
    # Multiply by 100 because composer does too
    expected_return_curve = Float32[
        0.018084612,
        0.0081910025,
        -0.011588683,
        -0.0040683276,
        0.008362861,
        -0.0029510795,
        0.02138328,
        -0.010555163,
        0.010832442,
        0.010327179,
        -0.008326943,
        -0.009496238,
        0.007125324,
        0.013693845,
        -0.015490954,
        0.0102037685,
        0.0067657856,
        0.010602734,
        0.012343228,
        -0.003876933,
        0.0002384549,
        -0.001362698,
        -0.00224105,
        -0.00054124556,
        0.004406971,
        0.0021769383,
        -0.0011817195,
        0.005443699,
        -0.0070729535,
        -0.0047115833,
        0.0082375165,
        0.0017042102,
        0.010528246,
        -0.00051188795,
        0.0,
    ]

    profile_history, trading_dates, min_days, flow_count, flow_stocks = execute_backtest(
        strategy_data,
        50,
        Date("2024-05-30"),
        price_cache,
        length(expected_return_curve) + 1,
    )

    return_curve::Vector{Float32} = calculate_final_return_curve(
        profile_history, trading_dates, min_days, Date("2024-05-30"), price_cache, DayData()
    )
    @testset "Front-Vix-Rot Sort with Folder and Std Returns" begin
        for i in min(length(return_curve), length(expected_return_curve))
            @test isapprox(return_curve[i], expected_return_curve[i], atol=0.05)
        end
    end
end

function compare_delta_curve_folderInvVol()
    strategy_path = "./App/Tests/SmokeTests/NodeTests/Composer-front-vix-rot-bgx.json"
    strategy_data::Dict{String,Any} = read_json_file(strategy_path)

    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()

    expected_return_curve = Float32[
        0.004600157,
        0.003835732,
        -0.0006562135,
        -0.004027309,
        0.0058286623,
        -0.00525261,
        0.00035204552,
        0.0021043087,
        0.0063787955,
        -0.002890111,
        0.004305017,
        -0.0035002613,
        -9.599742f-5,
        -0.0021118606,
        0.00010054186,
        -0.0035185872,
        0.0077084084,
        0.010465003,
        -0.0050701993,
        0.0022158925,
        0.0016794577,
        0.017534139,
        0.0054762107,
        -0.01113752,
        0.00019299437,
        -0.00024834464,
        -8.8642f-5,
        -0.0026711463,
        0.005245062,
        -0.0005102628,
        -0.002196522,
        0.001705429,
        -0.0040549235,
        -0.0022373372,
        0.00082110206,
        -0.0052433456,
        0.0067605674,
        0.006728161,
        0.0,
    ]

    profile_history, trading_dates, min_days, flow_count, flow_stocks = execute_backtest(
        strategy_data,
        50,
        Date("2024-05-30"),
        price_cache,
        length(expected_return_curve) + 1,
    )

    return_curve::Vector{Float32} = calculate_final_return_curve(
        profile_history, trading_dates, min_days, Date("2024-05-30"), price_cache, DayData()
    )
    @testset "Front-Vix-Rot Sort with Folder and Std Returns" begin
        for i in min(length(return_curve), length(expected_return_curve))
            @test isapprox(return_curve[i], expected_return_curve[i], atol=0.05)
        end
    end
end

end

# Run the tests
ComposerTestModule.compare_delta_curve_easy()
ComposerTestModule.compare_delta_curve_china()
ComposerTestModule.compare_delta_curve_sortNodeStdReturn()
ComposerTestModule.compare_delta_curve_folderInvVol()
