using Dates, DataFrames, Test, BenchmarkTools
include("./../../Main.jl")
include("./../../NodeProcessors/ConditonalNode.jl")
include("./../BenchmarkTimes.jl")

using Main.VectoriseBacktestService
using ..VectoriseBacktestService.Types
using .ConditionalNode
using .VectoriseBacktestService.GlobalServerCache
initialize_server_cache()

@testset "Conditional Node Test 1" begin
    conditional_node::Dict{String,Any} = Dict(
        "id" => "5bd141df62d9e7dbdad311c068a0bd9b",
        "componentType" => "switch",
        "type" => "condition",
        "name" => "if(5d Cumulative Return of AAPL > 5d Cumulative Return of QQQ)",
        "properties" => Dict{String,Any}(
            "y" => Dict{String,Any}(
                "source" => "QQQ",
                "indicator" => "Cumulative Return",
                "period" => "5",
            ),
            "x" => Dict{String,Any}(
                "indicator" => "Cumulative Return",
                "source" => "AAPL",
                "period" => "5",
            ),
            "isInvalid" => false,
            "comparison" => ">",
        ),
        "branches" => Dict{String,Vector{Any}}(
            "true" => [
                Dict{String,Any}(
                    "id" => "44d3fea8033b1cc11aeb510d2fdf6a56",
                    "componentType" => "largeTask",
                    "type" => "stock",
                    "name" => "BUY TQQQ",
                    "properties" => Dict("isInvalid" => false, "symbol" => "TQQQ"),
                    "parentHash" => "6ef078c51205d98c11a33f6ac5835037",
                ),
            ],
            "false" => [
                Dict{String,Any}(
                    "id" => "0381c40b4f1b6d2b9a8becaa67447cf4",
                    "componentType" => "largeTask",
                    "type" => "stock",
                    "name" => "BUY TSLA",
                    "properties" => Dict("isInvalid" => false, "symbol" => "TSLA"),
                    "parentHash" => "d0e7bc5227f36c7d1c3baac9bc446081",
                ),
            ],
        ),
        "parentHash" => "b4b147bc522828731f1a016bfa72c073",
        "nodeChildrenHash" => "d41d8cd98f00b204e980099asasdcf8427e",
    )
    active_mask::BitVector = BitVector(trues(250))
    common_data_span::Int = 250
    node_weight::Float32 = 1.0f0
    portfolio_history::Vector{DayData} = [DayData() for _ in 1:250]
    date_range::Vector{String} = [
        "2023-06-02",
        "2023-06-05",
        "2023-06-06",
        "2023-06-07",
        "2023-06-08",
        "2023-06-09",
        "2023-06-12",
        "2023-06-13",
        "2023-06-14",
        "2023-06-15",
        "2023-06-16",
        "2023-06-20",
        "2023-06-21",
        "2023-06-22",
        "2023-06-23",
        "2023-06-26",
        "2023-06-27",
        "2023-06-28",
        "2023-06-29",
        "2023-06-30",
        "2023-07-03",
        "2023-07-05",
        "2023-07-06",
        "2023-07-07",
        "2023-07-10",
        "2023-07-11",
        "2023-07-12",
        "2023-07-13",
        "2023-07-14",
        "2023-07-17",
        "2023-07-18",
        "2023-07-19",
        "2023-07-20",
        "2023-07-21",
        "2023-07-24",
        "2023-07-25",
        "2023-07-26",
        "2023-07-27",
        "2023-07-28",
        "2023-07-31",
        "2023-08-01",
        "2023-08-02",
        "2023-08-03",
        "2023-08-04",
        "2023-08-07",
        "2023-08-08",
        "2023-08-09",
        "2023-08-10",
        "2023-08-11",
        "2023-08-14",
        "2023-08-15",
        "2023-08-16",
        "2023-08-17",
        "2023-08-18",
        "2023-08-21",
        "2023-08-22",
        "2023-08-23",
        "2023-08-24",
        "2023-08-25",
        "2023-08-28",
        "2023-08-29",
        "2023-08-30",
        "2023-08-31",
        "2023-09-01",
        "2023-09-05",
        "2023-09-06",
        "2023-09-07",
        "2023-09-08",
        "2023-09-11",
        "2023-09-12",
        "2023-09-13",
        "2023-09-14",
        "2023-09-15",
        "2023-09-18",
        "2023-09-19",
        "2023-09-20",
        "2023-09-21",
        "2023-09-22",
        "2023-09-25",
        "2023-09-26",
        "2023-09-27",
        "2023-09-28",
        "2023-09-29",
        "2023-10-02",
        "2023-10-03",
        "2023-10-04",
        "2023-10-05",
        "2023-10-06",
        "2023-10-09",
        "2023-10-10",
        "2023-10-11",
        "2023-10-12",
        "2023-10-13",
        "2023-10-16",
        "2023-10-17",
        "2023-10-18",
        "2023-10-19",
        "2023-10-20",
        "2023-10-23",
        "2023-10-24",
        "2023-10-25",
        "2023-10-26",
        "2023-10-27",
        "2023-10-30",
        "2023-10-31",
        "2023-11-01",
        "2023-11-02",
        "2023-11-03",
        "2023-11-06",
        "2023-11-07",
        "2023-11-08",
        "2023-11-09",
        "2023-11-10",
        "2023-11-13",
        "2023-11-14",
        "2023-11-15",
        "2023-11-16",
        "2023-11-17",
        "2023-11-20",
        "2023-11-21",
        "2023-11-22",
        "2023-11-24",
        "2023-11-27",
        "2023-11-28",
        "2023-11-29",
        "2023-11-30",
        "2023-12-01",
        "2023-12-04",
        "2023-12-05",
        "2023-12-06",
        "2023-12-07",
        "2023-12-08",
        "2023-12-11",
        "2023-12-12",
        "2023-12-13",
        "2023-12-14",
        "2023-12-15",
        "2023-12-18",
        "2023-12-19",
        "2023-12-20",
        "2023-12-21",
        "2023-12-22",
        "2023-12-26",
        "2023-12-27",
        "2023-12-28",
        "2023-12-29",
        "2024-01-02",
        "2024-01-03",
        "2024-01-04",
        "2024-01-05",
        "2024-01-08",
        "2024-01-09",
        "2024-01-10",
        "2024-01-11",
        "2024-01-12",
        "2024-01-16",
        "2024-01-17",
        "2024-01-18",
        "2024-01-19",
        "2024-01-22",
        "2024-01-23",
        "2024-01-24",
        "2024-01-25",
        "2024-01-26",
        "2024-01-29",
        "2024-01-30",
        "2024-01-31",
        "2024-02-01",
        "2024-02-02",
        "2024-02-05",
        "2024-02-06",
        "2024-02-07",
        "2024-02-08",
        "2024-02-09",
        "2024-02-12",
        "2024-02-13",
        "2024-02-14",
        "2024-02-15",
        "2024-02-16",
        "2024-02-20",
        "2024-02-21",
        "2024-02-22",
        "2024-02-23",
        "2024-02-26",
        "2024-02-27",
        "2024-02-28",
        "2024-02-29",
        "2024-03-01",
        "2024-03-04",
        "2024-03-05",
        "2024-03-06",
        "2024-03-07",
        "2024-03-08",
        "2024-03-11",
        "2024-03-12",
        "2024-03-13",
        "2024-03-14",
        "2024-03-15",
        "2024-03-18",
        "2024-03-19",
        "2024-03-20",
        "2024-03-21",
        "2024-03-22",
        "2024-03-25",
        "2024-03-26",
        "2024-03-27",
        "2024-03-28",
        "2024-04-01",
        "2024-04-02",
        "2024-04-03",
        "2024-04-04",
        "2024-04-05",
        "2024-04-08",
        "2024-04-09",
        "2024-04-10",
        "2024-04-11",
        "2024-04-12",
        "2024-04-15",
        "2024-04-16",
        "2024-04-17",
        "2024-04-18",
        "2024-04-19",
        "2024-04-22",
        "2024-04-23",
        "2024-04-24",
        "2024-04-25",
        "2024-04-26",
        "2024-04-29",
        "2024-04-30",
        "2024-05-01",
        "2024-05-02",
        "2024-05-03",
        "2024-05-06",
        "2024-05-07",
        "2024-05-08",
        "2024-05-09",
        "2024-05-10",
        "2024-05-13",
        "2024-05-14",
        "2024-05-15",
        "2024-05-16",
        "2024-05-17",
        "2024-05-20",
        "2024-05-21",
        "2024-05-22",
        "2024-05-23",
        "2024-05-24",
        "2024-05-28",
        "2024-05-29",
        "2024-05-30",
    ]
    end_date::Date = Date("2024-05-30")
    flow_count::Dict{String,Int} = Dict{String,Int}()
    flow_stocks::Dict{String,Vector{DayData}} = Dict{String,Vector{DayData}}()
    indicator_cache::Dict{String,Vector{Float32}} = Dict{String,Vector{Float32}}()
    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()

    min_data_span = process_condition_node(
        conditional_node,
        active_mask,
        common_data_span,
        node_weight,
        portfolio_history,
        date_range,
        end_date,
        flow_count,
        flow_stocks,
        indicator_cache,
        price_cache,
        Dict{String,Any}(),
        0,
        false,
    )

    expected_min_data_span = 250

    @test expected_min_data_span == min_data_span

    # test for comparing profile history returned by process_conditional_node
    expected_portfolio_history::Vector{DayData} = DayData[
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
    ]

    for i in 1:250
        @test expected_portfolio_history[i] == portfolio_history[i]
    end

    timing_data = @benchmark process_condition_node(
        $conditional_node,
        $active_mask,
        $common_data_span,
        $node_weight,
        $portfolio_history,
        $date_range,
        $end_date,
        $flow_count,
        $flow_stocks,
        $indicator_cache,
        $price_cache,
        Dict{String,Any}(),
        0,
        false,
    )
    min_time = minimum(timing_data).time * 1e-9
    range = get_range(MIN_CONDITIONAL_NODE)
    @test MIN_CONDITIONAL_NODE - range <= min_time <= MIN_CONDITIONAL_NODE + range
    println("Minimum time taken for Conditional Node: ", min_time, " seconds")
end

@testset "Conditional Node Test 2" begin
    conditional_node = Dict{String,Any}(
        "id" => "783c77cd0776390132f3dc8a744abfa4",
        "componentType" => "switch",
        "type" => "condition",
        "name" => "if(2d Cumulative Return of AAPL > Cumulative Return of QQQ 2d)",
        "properties" => Dict{String,Any}(
            "y" => Dict{String,Any}(
                "indicator" => "Cumulative Return",
                "source" => "QQQ",
                "period" => "2",
            ),
            "x" => Dict{String,Any}(
                "indicator" => "Cumulative Return",
                "source" => "AAPL",
                "period" => "2",
            ),
            "comparison" => ">",
        ),
        "branches" => Dict{String,Vector{Any}}(
            "true" => [
                Dict{String,Any}(
                    "id" => "d72a96a0ce5e12927a4c9e9a3cbe41f5",
                    "componentType" => "folder",
                    "type" => "folder",
                    "name" => "man al",
                    "sequence" => [
                        Dict{String,Any}(
                            "id" => "807c97f32b43f28dd9ef7515be51ccf5",
                            "componentType" => "switch",
                            "type" => "allocation",
                            "name" => "Manual Allocation",
                            "function" => "Allocation",
                            "properties" => Dict{String,Any}(
                                "values" => Dict{String,Any}("a" => 20, "b" => 80),
                                "isInvalid" => false,
                            ),
                            "branches" => Dict{String,Any}(
                                "a-(20%)" => [
                                    Dict{String,Any}(
                                        "id" => "3f9ad83412e3ec2535839e70ed1b39df",
                                        "componentType" => "largeTask",
                                        "type" => "stock",
                                        "name" => "BUY AAPL",
                                        "properties" =>
                                            Dict{String,Any}(
                                                "isInvalid" => false,
                                                "symbol" => "AAPL",
                                            ),
                                        "parentHash" => "b9ec77159db6f61ca00737cc18d28a13",
                                    ),
                                ],
                                "b-(80%)" => [
                                    Dict{String,Any}(
                                        "id" => "cc0f485e0bfe154c12f8d432e813945d",
                                        "componentType" => "largeTask",
                                        "type" => "stock",
                                        "name" => "BUY SPY",
                                        "properties" =>
                                            Dict{String,Any}(
                                                "isInvalid" => false,
                                                "symbol" => "SPY",
                                            ),
                                        "parentHash" => "64d6a2fb5f8d31213defb622fc6b252b",
                                    ),
                                ],
                            ),
                            "parentHash" => "ef58bc0f50b6c6a9232f8219fa7e7def",
                            "nodeChildrenHash" => "d4132d8cd98f00b204e9800998ecf8427e",
                        ),
                    ],
                    "properties" => Dict{String,Any}(
                        "isCloudFolder" => false,
                        "folder_id" => "",
                        "author_id" => "",
                        "author_history" => Dict{String,Any}(),
                    ),
                    "parentHash" => "6ef078c51205d98c11a33f6ac5835037",
                    "nodeChildrenHash" => "d41d8cd9812500b204e9800998ecf8427e",
                ),
            ],
            "false" => [
                Dict{String,Any}(
                    "id" => "c3573e55d7d7d34191d5745f419a5d6f",
                    "componentType" => "folder",
                    "type" => "folder",
                    "name" => "sortnode",
                    "sequence" => [
                        Dict{String,Any}(
                            "id" => "2afb12437977c3d981deb4625efe2746",
                            "componentType" => "switch",
                            "type" => "Sort",
                            "name" => "SortBy: 2d Max Drawdown",
                            "properties" => Dict{String,Any}(
                                "sortby" => Dict{String,Any}(
                                    "function" => "Max Drawdown",
                                    "window" => "2",
                                ),
                                "select" => Dict{String,Any}(
                                    "function" => "Top",
                                    "howmany" => "1",
                                ),
                                "isInvalid" => false,
                            ),
                            "branches" => Dict{String,Any}(
                                "Top-1" => [
                                    Dict{String,Any}(
                                        "id" => "bba64c31d836fcf8354f8867ce752dee",
                                        "componentType" => "largeTask",
                                        "type" => "stock",
                                        "name" => "BUY AAPL",
                                        "properties" =>
                                            Dict{String,Any}(
                                                "isInvalid" => false,
                                                "symbol" => "AAPL",
                                            ),
                                        "parentHash" => "34c440aee631e4410728d2d2d4cb1890",
                                    ),
                                    Dict{String,Any}(
                                        "id" => "21c51fdfecc0488c226650d36572f013",
                                        "componentType" => "largeTask",
                                        "type" => "stock",
                                        "name" => "BUY TQQQ",
                                        "properties" =>
                                            Dict{String,Any}(
                                                "isInvalid" => false,
                                                "symbol" => "TQQQ",
                                            ),
                                        "parentHash" => "34c440aee631e4410728d2d2d4cb1890",
                                    ),
                                    Dict{String,Any}(
                                        "id" => "15ace9a0beb1cfda588233b857a15ca4",
                                        "componentType" => "largeTask",
                                        "type" => "stock",
                                        "name" => "BUY SPY",
                                        "properties" =>
                                            Dict{String,Any}(
                                                "isInvalid" => false,
                                                "symbol" => "SPY",
                                            ),
                                        "parentHash" => "34c440aee631e4410728d2d2d4cb1890",
                                    ),
                                ],
                            ),
                            "parentHash" => "b530c7608ab7f0fbdf4d2a93490855e5",
                            "nodeChildrenHash" => "33c0f198391238aa675c349d6e7245f24",
                        ),
                    ],
                    "properties" => Dict{String,Any}(
                        "isCloudFolder" => false,
                        "folder_id" => "",
                        "author_id" => "",
                        "author_history" => Dict{String,Any}(),
                    ),
                    "parentHash" => "d0e7bc5227f36c7d1c3baac9bc446081",
                    "nodeChildrenHash" => "d41d8cd98f00b204e98001234998ecf8427e",
                ),
            ],
        ),
        "parentHash" => "b4b147bc522828731f1a016bfa72c073",
        "nodeChildrenHash" => "156f6bfa06d883e7d7cd22db5346034235c",
    )
    active_mask::BitVector = BitVector(trues(50))
    common_data_span::Int = 50
    node_weight::Float32 = 1.0f0
    portfolio_history::Vector{DayData} = [DayData() for _ in 1:50]
    date_range::Vector{String} = [
        "2024-06-20",
        "2024-06-21",
        "2024-06-24",
        "2024-06-25",
        "2024-06-26",
        "2024-06-27",
        "2024-06-28",
        "2024-07-01",
        "2024-07-02",
        "2024-07-03",
        "2024-07-05",
        "2024-07-08",
        "2024-07-09",
        "2024-07-10",
        "2024-07-11",
        "2024-07-12",
        "2024-07-15",
        "2024-07-16",
        "2024-07-17",
        "2024-07-18",
        "2024-07-19",
        "2024-07-22",
        "2024-07-23",
        "2024-07-24",
        "2024-07-25",
        "2024-07-26",
        "2024-07-29",
        "2024-07-30",
        "2024-07-31",
        "2024-08-01",
        "2024-08-02",
        "2024-08-05",
        "2024-08-06",
        "2024-08-07",
        "2024-08-08",
        "2024-08-09",
        "2024-08-12",
        "2024-08-13",
        "2024-08-14",
        "2024-08-15",
        "2024-08-16",
        "2024-08-19",
        "2024-08-20",
        "2024-08-21",
        "2024-08-22",
        "2024-08-23",
        "2024-08-26",
        "2024-08-27",
        "2024-08-28",
        "2024-08-29",
        "2024-08-30",
    ]
    end_date::Date = Date("2024-08-30")
    flow_count::Dict{String,Int} = Dict{String,Int}()
    flow_stocks::Dict{String,Vector{DayData}} = Dict{String,Vector{DayData}}()
    indicator_cache::Dict{String,Vector{Float32}} = Dict{String,Vector{Float32}}()
    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()

    min_data_span = process_condition_node(
        conditional_node,
        active_mask,
        common_data_span,
        node_weight,
        portfolio_history,
        date_range,
        end_date,
        flow_count,
        flow_stocks,
        indicator_cache,
        price_cache,
        Dict{String,Any}(),
        0,
        false,
    )
    expected_min_data_span = 48

    @test expected_min_data_span == min_data_span

    # test for comparing profile history returned by process_conditional_node
    expected_portfolio_history::Vector{DayData} = DayData[
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("AAPL", 1.0f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
        DayData(StockInfo[StockInfo("SPY", 0.8f0), StockInfo("AAPL", 0.2f0)]),
    ]

    for i in 1:48
        @test portfolio_history[end - i + 1] == expected_portfolio_history[end - i + 1]
    end

    timing_data = @benchmark process_condition_node(
        $conditional_node,
        $active_mask,
        $common_data_span,
        $node_weight,
        $portfolio_history,
        $date_range,
        $end_date,
        $flow_count,
        $flow_stocks,
        $indicator_cache,
        $price_cache,
        Dict{String,Any}(),
        0,
        false,
    )
    min_time = minimum(timing_data).time * 1e-9
    println("Minimum time taken for Conditional Node: ", min_time, " seconds")
end

@testset "Conditional Node Test 3" begin
    conditional_node::Dict{String,Any} = Dict{String,Any}(
        "id" => "9183267c87bf29897a0e685c9e0bd7f4",
        "componentType" => "switch",
        "type" => "condition",
        "name" => "if(5d Standard Deviation of Price  of KLAC < 5d Exponential Moving Average of Price of AAPL)",
        "properties" => Dict{String,Any}(
            "y" => Dict{String,Any}(
                "indicator" => "Exponential Moving Average of Price",
                "source" => "AAPL",
                "period" => "5",
            ),
            "x" => Dict{String,Any}(
                "indicator" => "Standard Deviation of Price",
                "source" => "KLAC",
                "period" => "5",
            ),
            "isInvalid" => false,
            "comparison" => "<",
        ),
        "branches" => Dict{String,Vector{Any}}(
            "true" => [
                Dict{String,Any}(
                    "id" => "85193b8af59264df8d82c6c0cc6c5091",
                    "componentType" => "largeTask",
                    "type" => "stock",
                    "name" => "BUY TQQQ",
                    "properties" =>
                        Dict{String,Any}("isInvalid" => false, "symbol" => "TQQQ"),
                    "parentHash" => "6ef078c51205d98c11a33f6ac5835037",
                ),
            ],
            "false" => [
                Dict{String,Any}(
                    "id" => "448d26a0286f632e1a21d98dc3b6f0d2",
                    "componentType" => "largeTask",
                    "type" => "stock",
                    "name" => "BUY QQQ",
                    "properties" =>
                        Dict{String,Any}("isInvalid" => false, "symbol" => "QQQ"),
                    "parentHash" => "d0e7bc5227f36c7d1c3baac9bc446081",
                ),
            ],
        ),
        "parentHash" => "b4b147bc522828731f1a016bfa72c073",
        "nodeChildrenHash" => "d41d8cd98f00b204e98345100998ecf8427e",
    )
    active_mask::BitVector = BitVector(trues(250))
    common_data_span::Int = 250
    node_weight::Float32 = 1.0f0
    portfolio_history::Vector{DayData} = [DayData() for _ in 1:250]
    date_range::Vector{String} = [
        "2023-06-02",
        "2023-06-05",
        "2023-06-06",
        "2023-06-07",
        "2023-06-08",
        "2023-06-09",
        "2023-06-12",
        "2023-06-13",
        "2023-06-14",
        "2023-06-15",
        "2023-06-16",
        "2023-06-20",
        "2023-06-21",
        "2023-06-22",
        "2023-06-23",
        "2023-06-26",
        "2023-06-27",
        "2023-06-28",
        "2023-06-29",
        "2023-06-30",
        "2023-07-03",
        "2023-07-05",
        "2023-07-06",
        "2023-07-07",
        "2023-07-10",
        "2023-07-11",
        "2023-07-12",
        "2023-07-13",
        "2023-07-14",
        "2023-07-17",
        "2023-07-18",
        "2023-07-19",
        "2023-07-20",
        "2023-07-21",
        "2023-07-24",
        "2023-07-25",
        "2023-07-26",
        "2023-07-27",
        "2023-07-28",
        "2023-07-31",
        "2023-08-01",
        "2023-08-02",
        "2023-08-03",
        "2023-08-04",
        "2023-08-07",
        "2023-08-08",
        "2023-08-09",
        "2023-08-10",
        "2023-08-11",
        "2023-08-14",
        "2023-08-15",
        "2023-08-16",
        "2023-08-17",
        "2023-08-18",
        "2023-08-21",
        "2023-08-22",
        "2023-08-23",
        "2023-08-24",
        "2023-08-25",
        "2023-08-28",
        "2023-08-29",
        "2023-08-30",
        "2023-08-31",
        "2023-09-01",
        "2023-09-05",
        "2023-09-06",
        "2023-09-07",
        "2023-09-08",
        "2023-09-11",
        "2023-09-12",
        "2023-09-13",
        "2023-09-14",
        "2023-09-15",
        "2023-09-18",
        "2023-09-19",
        "2023-09-20",
        "2023-09-21",
        "2023-09-22",
        "2023-09-25",
        "2023-09-26",
        "2023-09-27",
        "2023-09-28",
        "2023-09-29",
        "2023-10-02",
        "2023-10-03",
        "2023-10-04",
        "2023-10-05",
        "2023-10-06",
        "2023-10-09",
        "2023-10-10",
        "2023-10-11",
        "2023-10-12",
        "2023-10-13",
        "2023-10-16",
        "2023-10-17",
        "2023-10-18",
        "2023-10-19",
        "2023-10-20",
        "2023-10-23",
        "2023-10-24",
        "2023-10-25",
        "2023-10-26",
        "2023-10-27",
        "2023-10-30",
        "2023-10-31",
        "2023-11-01",
        "2023-11-02",
        "2023-11-03",
        "2023-11-06",
        "2023-11-07",
        "2023-11-08",
        "2023-11-09",
        "2023-11-10",
        "2023-11-13",
        "2023-11-14",
        "2023-11-15",
        "2023-11-16",
        "2023-11-17",
        "2023-11-20",
        "2023-11-21",
        "2023-11-22",
        "2023-11-24",
        "2023-11-27",
        "2023-11-28",
        "2023-11-29",
        "2023-11-30",
        "2023-12-01",
        "2023-12-04",
        "2023-12-05",
        "2023-12-06",
        "2023-12-07",
        "2023-12-08",
        "2023-12-11",
        "2023-12-12",
        "2023-12-13",
        "2023-12-14",
        "2023-12-15",
        "2023-12-18",
        "2023-12-19",
        "2023-12-20",
        "2023-12-21",
        "2023-12-22",
        "2023-12-26",
        "2023-12-27",
        "2023-12-28",
        "2023-12-29",
        "2024-01-02",
        "2024-01-03",
        "2024-01-04",
        "2024-01-05",
        "2024-01-08",
        "2024-01-09",
        "2024-01-10",
        "2024-01-11",
        "2024-01-12",
        "2024-01-16",
        "2024-01-17",
        "2024-01-18",
        "2024-01-19",
        "2024-01-22",
        "2024-01-23",
        "2024-01-24",
        "2024-01-25",
        "2024-01-26",
        "2024-01-29",
        "2024-01-30",
        "2024-01-31",
        "2024-02-01",
        "2024-02-02",
        "2024-02-05",
        "2024-02-06",
        "2024-02-07",
        "2024-02-08",
        "2024-02-09",
        "2024-02-12",
        "2024-02-13",
        "2024-02-14",
        "2024-02-15",
        "2024-02-16",
        "2024-02-20",
        "2024-02-21",
        "2024-02-22",
        "2024-02-23",
        "2024-02-26",
        "2024-02-27",
        "2024-02-28",
        "2024-02-29",
        "2024-03-01",
        "2024-03-04",
        "2024-03-05",
        "2024-03-06",
        "2024-03-07",
        "2024-03-08",
        "2024-03-11",
        "2024-03-12",
        "2024-03-13",
        "2024-03-14",
        "2024-03-15",
        "2024-03-18",
        "2024-03-19",
        "2024-03-20",
        "2024-03-21",
        "2024-03-22",
        "2024-03-25",
        "2024-03-26",
        "2024-03-27",
        "2024-03-28",
        "2024-04-01",
        "2024-04-02",
        "2024-04-03",
        "2024-04-04",
        "2024-04-05",
        "2024-04-08",
        "2024-04-09",
        "2024-04-10",
        "2024-04-11",
        "2024-04-12",
        "2024-04-15",
        "2024-04-16",
        "2024-04-17",
        "2024-04-18",
        "2024-04-19",
        "2024-04-22",
        "2024-04-23",
        "2024-04-24",
        "2024-04-25",
        "2024-04-26",
        "2024-04-29",
        "2024-04-30",
        "2024-05-01",
        "2024-05-02",
        "2024-05-03",
        "2024-05-06",
        "2024-05-07",
        "2024-05-08",
        "2024-05-09",
        "2024-05-10",
        "2024-05-13",
        "2024-05-14",
        "2024-05-15",
        "2024-05-16",
        "2024-05-17",
        "2024-05-20",
        "2024-05-21",
        "2024-05-22",
        "2024-05-23",
        "2024-05-24",
        "2024-05-28",
        "2024-05-29",
        "2024-05-30",
    ]
    end_date::Date = Date("2024-05-30")
    flow_count::Dict{String,Int} = Dict{String,Int}()
    flow_stocks::Dict{String,Vector{DayData}} = Dict{String,Vector{DayData}}()
    indicator_cache::Dict{String,Vector{Float32}} = Dict{String,Vector{Float32}}()
    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()

    min_data_span = process_condition_node(
        conditional_node,
        active_mask,
        common_data_span,
        node_weight,
        portfolio_history,
        date_range,
        end_date,
        flow_count,
        flow_stocks,
        indicator_cache,
        price_cache,
        Dict{String,Any}(),
        0,
        false,
    )

    expected_min_data_span = 250

    @test expected_min_data_span == min_data_span

    # test for comparing profile history returned by process_conditional_node
    expected_portfolio_history::Vector{DayData} = DayData[
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
        DayData(StockInfo[StockInfo("TQQQ", 1.0f0)]),
    ]
    for i in 1:250
        @test portfolio_history[i] == expected_portfolio_history[i]
    end

    timing_data = @benchmark process_condition_node(
        $conditional_node,
        $active_mask,
        $common_data_span,
        $node_weight,
        $portfolio_history,
        $date_range,
        $end_date,
        $flow_count,
        $flow_stocks,
        $indicator_cache,
        $price_cache,
        Dict{String,Any}(),
        0,
        false,
    )
    min_time = minimum(timing_data).time * 1e-9
    range = get_range(MIN_CONDITIONAL_NODE)
    @test MIN_CONDITIONAL_NODE - range <= min_time <= MIN_CONDITIONAL_NODE + range
    println("Minimum time taken for Conditional Node: ", min_time, " seconds")
end

@testset "Conditional Node Error Case" begin
    conditional_node::Dict{String,Any} = Dict{String,Any}(
        "id" => "9183267c87bf29897a0e685c9e0bd7f4",
        "componentType" => "switch",
        "type" => "condition",
        "name" => "if(5d Standard Deviation of Price  of KLAC < 5d Exponential Moving Average of Price of AAPL)",
        "properties" => Dict{String,Any}(
            "y" => Dict{String,Any}(
                "indicator" => "Exponential Moving Average of Price",
                "source" => "AAPL",
                "period" => "5",
            ),
            "x" => Dict{String,Any}(
                "indicator" => "Standard Deviation of Price",
                "source" => "KLAC",
                "period" => "5",
            ),
            "isInvalid" => false,
            "comparison" => "!",
        ),
        "branches" => Dict{String,Vector{Any}}(
            "true" => [
                Dict{String,Any}(
                    "id" => "85193b8af59264df8d82c6c0cc6c5091",
                    "componentType" => "largeTask",
                    "type" => "stock",
                    "name" => "BUY TQQQ",
                    "properties" =>
                        Dict{String,Any}("isInvalid" => false, "symbol" => "TQQQ"),
                    "parentHash" => "6ef078c51205d98c11a33f6ac5835037",
                ),
            ],
            "false" => [
                Dict{String,Any}(
                    "id" => "448d26a0286f632e1a21d98dc3b6f0d2",
                    "componentType" => "largeTask",
                    "type" => "stock",
                    "name" => "BUY QQQ",
                    "properties" =>
                        Dict{String,Any}("isInvalid" => false, "symbol" => "QQQ"),
                    "parentHash" => "d0e7bc5227f36c7d1c3baac9bc446081",
                ),
            ],
        ),
        "parentHash" => "b4b147bc522828731f1a016bfa72c073",
        "nodeChildrenHash" => "d41d8cd98f00b204e98009981452ecf8427e",
    )
    active_mask::BitVector = BitVector(trues(250))
    common_data_span::Int = 250
    node_weight::Float32 = 1.0f0
    portfolio_history::Vector{DayData} = [DayData() for _ in 1:250]
    date_range::Vector{String} = [
        "2023-06-02",
        "2023-06-05",
        "2023-06-06",
        "2023-06-07",
        "2023-06-08",
        "2023-06-09",
        "2023-06-12",
        "2023-06-13",
        "2023-06-14",
        "2023-06-15",
        "2023-06-16",
        "2023-06-20",
        "2023-06-21",
        "2023-06-22",
        "2023-06-23",
        "2023-06-26",
        "2023-06-27",
        "2023-06-28",
        "2023-06-29",
        "2023-06-30",
        "2023-07-03",
        "2023-07-05",
        "2023-07-06",
        "2023-07-07",
        "2023-07-10",
        "2023-07-11",
        "2023-07-12",
        "2023-07-13",
        "2023-07-14",
        "2023-07-17",
        "2023-07-18",
        "2023-07-19",
        "2023-07-20",
        "2023-07-21",
        "2023-07-24",
        "2023-07-25",
        "2023-07-26",
        "2023-07-27",
        "2023-07-28",
        "2023-07-31",
        "2023-08-01",
        "2023-08-02",
        "2023-08-03",
        "2023-08-04",
        "2023-08-07",
        "2023-08-08",
        "2023-08-09",
        "2023-08-10",
        "2023-08-11",
        "2023-08-14",
        "2023-08-15",
        "2023-08-16",
        "2023-08-17",
        "2023-08-18",
        "2023-08-21",
        "2023-08-22",
        "2023-08-23",
        "2023-08-24",
        "2023-08-25",
        "2023-08-28",
        "2023-08-29",
        "2023-08-30",
        "2023-08-31",
        "2023-09-01",
        "2023-09-05",
        "2023-09-06",
        "2023-09-07",
        "2023-09-08",
        "2023-09-11",
        "2023-09-12",
        "2023-09-13",
        "2023-09-14",
        "2023-09-15",
        "2023-09-18",
        "2023-09-19",
        "2023-09-20",
        "2023-09-21",
        "2023-09-22",
        "2023-09-25",
        "2023-09-26",
        "2023-09-27",
        "2023-09-28",
        "2023-09-29",
        "2023-10-02",
        "2023-10-03",
        "2023-10-04",
        "2023-10-05",
        "2023-10-06",
        "2023-10-09",
        "2023-10-10",
        "2023-10-11",
        "2023-10-12",
        "2023-10-13",
        "2023-10-16",
        "2023-10-17",
        "2023-10-18",
        "2023-10-19",
        "2023-10-20",
        "2023-10-23",
        "2023-10-24",
        "2023-10-25",
        "2023-10-26",
        "2023-10-27",
        "2023-10-30",
        "2023-10-31",
        "2023-11-01",
        "2023-11-02",
        "2023-11-03",
        "2023-11-06",
        "2023-11-07",
        "2023-11-08",
        "2023-11-09",
        "2023-11-10",
        "2023-11-13",
        "2023-11-14",
        "2023-11-15",
        "2023-11-16",
        "2023-11-17",
        "2023-11-20",
        "2023-11-21",
        "2023-11-22",
        "2023-11-24",
        "2023-11-27",
        "2023-11-28",
        "2023-11-29",
        "2023-11-30",
        "2023-12-01",
        "2023-12-04",
        "2023-12-05",
        "2023-12-06",
        "2023-12-07",
        "2023-12-08",
        "2023-12-11",
        "2023-12-12",
        "2023-12-13",
        "2023-12-14",
        "2023-12-15",
        "2023-12-18",
        "2023-12-19",
        "2023-12-20",
        "2023-12-21",
        "2023-12-22",
        "2023-12-26",
        "2023-12-27",
        "2023-12-28",
        "2023-12-29",
        "2024-01-02",
        "2024-01-03",
        "2024-01-04",
        "2024-01-05",
        "2024-01-08",
        "2024-01-09",
        "2024-01-10",
        "2024-01-11",
        "2024-01-12",
        "2024-01-16",
        "2024-01-17",
        "2024-01-18",
        "2024-01-19",
        "2024-01-22",
        "2024-01-23",
        "2024-01-24",
        "2024-01-25",
        "2024-01-26",
        "2024-01-29",
        "2024-01-30",
        "2024-01-31",
        "2024-02-01",
        "2024-02-02",
        "2024-02-05",
        "2024-02-06",
        "2024-02-07",
        "2024-02-08",
        "2024-02-09",
        "2024-02-12",
        "2024-02-13",
        "2024-02-14",
        "2024-02-15",
        "2024-02-16",
        "2024-02-20",
        "2024-02-21",
        "2024-02-22",
        "2024-02-23",
        "2024-02-26",
        "2024-02-27",
        "2024-02-28",
        "2024-02-29",
        "2024-03-01",
        "2024-03-04",
        "2024-03-05",
        "2024-03-06",
        "2024-03-07",
        "2024-03-08",
        "2024-03-11",
        "2024-03-12",
        "2024-03-13",
        "2024-03-14",
        "2024-03-15",
        "2024-03-18",
        "2024-03-19",
        "2024-03-20",
        "2024-03-21",
        "2024-03-22",
        "2024-03-25",
        "2024-03-26",
        "2024-03-27",
        "2024-03-28",
        "2024-04-01",
        "2024-04-02",
        "2024-04-03",
        "2024-04-04",
        "2024-04-05",
        "2024-04-08",
        "2024-04-09",
        "2024-04-10",
        "2024-04-11",
        "2024-04-12",
        "2024-04-15",
        "2024-04-16",
        "2024-04-17",
        "2024-04-18",
        "2024-04-19",
        "2024-04-22",
        "2024-04-23",
        "2024-04-24",
        "2024-04-25",
        "2024-04-26",
        "2024-04-29",
        "2024-04-30",
        "2024-05-01",
        "2024-05-02",
        "2024-05-03",
        "2024-05-06",
        "2024-05-07",
        "2024-05-08",
        "2024-05-09",
        "2024-05-10",
        "2024-05-13",
        "2024-05-14",
        "2024-05-15",
        "2024-05-16",
        "2024-05-17",
        "2024-05-20",
        "2024-05-21",
        "2024-05-22",
        "2024-05-23",
        "2024-05-24",
        "2024-05-28",
        "2024-05-29",
        "2024-05-30",
    ]
    end_date::Date = Date("2024-05-30")
    flow_count::Dict{String,Int} = Dict{String,Int}()
    flow_stocks::Dict{String,Vector{DayData}} = Dict{String,Vector{DayData}}()
    indicator_cache::Dict{String,Vector{Float32}} = Dict{String,Vector{Float32}}()
    price_cache::Dict{String,DataFrame} = Dict{String,DataFrame}()

    @test_throws r"ConditionEvalError" process_condition_node(
        conditional_node,
        active_mask,
        common_data_span,
        node_weight,
        portfolio_history,
        date_range,
        end_date,
        flow_count,
        flow_stocks,
        indicator_cache,
        price_cache,
        Dict{String,Any}(),
        0,
        false,
    )
end

@testset "Conditional node Test 4 (Stock Ratio)" begin
    @testset "Success case" begin
        conditional_node::Dict{String,Any} = Dict{String,Any}(
            "name" => "if: [RSI-2d   of AAPL/SPY] > [current price of QQQ/TSLA]",
            "componentType" => "switch",
            "branches" => Dict{String,Any}(
                "true" => Any[Dict{String,Any}(
                    "name" => "BUY QQQ",
                    "componentType" => "task",
                    "properties" => Dict{String,Any}("symbol" => "QQQ"),
                    "id" => "714628fcdeda1ca52722fd562e0f97f5",
                    "type" => "stock",
                )],
                "false" => Any[Dict{String,Any}(
                    "name" => "BUY TSLA",
                    "componentType" => "task",
                    "properties" =>
                        Dict{String,Any}("isInvalid" => false, "symbol" => "TSLA"),
                    "id" => "6b356746326f1193aca5b70f6b24a653",
                    "parentHash" => "26478db11a74b3c8675f463fee30cba7",
                    "type" => "stock",
                )],
            ),
            "properties" => Dict{String,Any}(
                "comparison" => ">",
                "x" => Dict{String,Any}(
                    "source" => "",
                    "period" => "2",
                    "indicator" => "Relative Strength Index",
                    "denominator" => "SPY",
                    "numerator" => "AAPL",
                ),
                "y" => Dict{String,Any}(
                    "source" => "",
                    "indicator" => "current price",
                    "denominator" => "TSLA",
                    "numerator" => "QQQ",
                ),
            ),
            "id" => "02eacab60b6ea6dddff673d15d9885b5",
            "parentHash" => "d41d8cd98f00b204e9800998ecf8427e",
            "type" => "condition",
            "nodeChildrenHash" => "e3342ccad2f5a7f53fe42261812428e2974",
        )

        active_mask = BitVector(trues(50))
        common_data_span = 50
        node_weight = 1.0f0
        portfolio_history = [DayData() for _ in 1:50]
        date_range = [
            "2024-06-20",
            "2024-06-21",
            "2024-06-24",
            "2024-06-25",
            "2024-06-26",
            "2024-06-27",
            "2024-06-28",
            "2024-07-01",
            "2024-07-02",
            "2024-07-03",
            "2024-07-05",
            "2024-07-08",
            "2024-07-09",
            "2024-07-10",
            "2024-07-11",
            "2024-07-12",
            "2024-07-15",
            "2024-07-16",
            "2024-07-17",
            "2024-07-18",
            "2024-07-19",
            "2024-07-22",
            "2024-07-23",
            "2024-07-24",
            "2024-07-25",
            "2024-07-26",
            "2024-07-29",
            "2024-07-30",
            "2024-07-31",
            "2024-08-01",
            "2024-08-02",
            "2024-08-05",
            "2024-08-06",
            "2024-08-07",
            "2024-08-08",
            "2024-08-09",
            "2024-08-12",
            "2024-08-13",
            "2024-08-14",
            "2024-08-15",
            "2024-08-16",
            "2024-08-19",
            "2024-08-20",
            "2024-08-21",
            "2024-08-22",
            "2024-08-23",
            "2024-08-26",
            "2024-08-27",
            "2024-08-28",
            "2024-08-29",
            "2024-08-30",
        ]
        end_date = Date("2024-08-30")
        flow_count = Dict{String,Int}()
        flow_stocks = Dict{String,Vector{DayData}}()
        indicator_cache = Dict{String,Vector{Float32}}()
        price_cache = Dict{String,DataFrame}()
        min_data_span = process_condition_node(
            conditional_node,
            active_mask,
            common_data_span,
            node_weight,
            portfolio_history,
            date_range,
            end_date,
            flow_count,
            flow_stocks,
            indicator_cache,
            price_cache,
            Dict{String,Any}(),
            0,
            false,
        )
        expected_portfolio_history = DayData[
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("QQQ", 1.0f0)]),
            DayData(StockInfo[StockInfo("TSLA", 1.0f0)]),
        ]
        for i in 1:50
            @test portfolio_history[i] == expected_portfolio_history[i]
        end

        timing_data = @benchmark process_condition_node(
            $conditional_node,
            $active_mask,
            $common_data_span,
            $node_weight,
            $portfolio_history,
            $date_range,
            $end_date,
            $flow_count,
            $flow_stocks,
            $indicator_cache,
            $price_cache,
            Dict{String,Any}(),
            0,
            false,
        )

        min_time = minimum(timing_data).time * 1e-9
        println("Minimum time taken for Conditional Node: ", min_time, " seconds")
    end

    @testset "Error case in conditionEval" begin
        node::Dict{String,Any} = Dict{String,Any}(
            "type" => "condition",
            "properties" => Dict{String,Any}(
                "comparison" => ">",
                "x" => Dict{String,Any}(
                    "source" => "",
                    "period" => "2",
                    "indicator" => "Relative Strength Index",
                    "denominator" => "SPY",
                    "numerator" => "AAPL",
                ),
                "y" => Dict{String,Any}(
                    "source" => "",
                    "indicator" => "current price",
                    "denominator" => "TSLA",
                    "numerator" => "QQQ",
                ),
            ),
        )
        delete!(node["properties"]["x"], "numerator")
        delete!(node["properties"]["x"], "denominator")
        cache = Dict{String,Vector{Float32}}()
        price_cache = Dict{String,DataFrame}()
        date_range = Vector{String}()
        @test_throws r"ConditionEvalError" conditionEval(
            node, date_range, 50, Date("2024-08-30"), cache, price_cache, Dict{String,Any}()
        )
    end
end
