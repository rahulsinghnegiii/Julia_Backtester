#!/usr/bin/env julia

# Simple SmallStrategy Validation Script
println("="^60)
println("SMALLSTRATEGY VALIDATION TEST")
println("="^60)

# Change to App directory
try
    cd("App")
    println("‚úì Changed to App directory: ", pwd())
catch e
    println("‚úó Failed to change to App directory: $e")
    exit(1)
end

# Test 1: Check if required files exist
println("\n1. Checking required files...")
required_files = [
    "Tests/E2E/JSONs/SmallStrategy.json",
    "Tests/E2E/ExpectedFiles/SmallStrategy.json", 
    "Tests/UnitTests/SmallStrategyTest.jl",
    "Main.jl",
    "Project.toml"
]

all_files_exist = true
for file in required_files
    if isfile(file)
        println("  ‚úì $file")
    else
        println("  ‚úó $file - MISSING")
        global all_files_exist = false
    end
end

if !all_files_exist
    println("\n‚ùå Some required files are missing!")
    exit(1)
end

# Test 2: Load and parse SmallStrategy.json
println("\n2. Testing SmallStrategy.json parsing...")
try
    using JSON
    strategy_data = JSON.parse(read("Tests/E2E/JSONs/SmallStrategy.json", String))
    strategy_json = JSON.parse(strategy_data["json"])
    
    println("  ‚úì SmallStrategy.json parsed successfully")
    println("  ‚úì Strategy type: $(strategy_json["type"])")
    println("  ‚úì Tickers: $(join(strategy_json["tickers"], ", "))")
    println("  ‚úì Period: $(strategy_data["period"]) days")
    println("  ‚úì Hash: $(strategy_data["hash"])")
    
    # Store for later use
    global parsed_strategy_data = strategy_data
    global parsed_strategy_json = strategy_json
    
catch e
    println("  ‚úó Failed to parse SmallStrategy.json: $e")
    exit(1)
end

# Test 3: Load Main module
println("\n3. Testing Main module loading...")
try
    println("  Current directory: ", pwd())
    include("Main.jl")
    println("  ‚úì Main.jl loaded successfully")
    
    # Check if VectoriseBacktestService is available
    if isdefined(Main, :VectoriseBacktestService)
        println("  ‚úì VectoriseBacktestService module available")
        
        # Check key function
        if isdefined(VectoriseBacktestService, :handle_backtesting_api)
            println("  ‚úì handle_backtesting_api function available")
        else
            println("  ‚úó handle_backtesting_api function not available")
            exit(1)
        end
    else
        println("  ‚úó VectoriseBacktestService module not available")
        exit(1)
    end
    
catch e
    println("  ‚úó Failed to load Main module: $e")
    println("     Error details: $e")
    exit(1)
end

# Test 4: Execute SmallStrategy (short version)
println("\n4. Testing SmallStrategy execution...")
try
    using Dates
    
    backtest_period = 100  # Shorter period for testing
    end_date = Date("2024-01-31")
    strategy_hash = parsed_strategy_data["hash"] * "_test"
    
    println("  Executing strategy with:")
    println("    - Period: $backtest_period days")
    println("    - End date: $end_date")
    println("    - Hash: $strategy_hash")
    
    start_time = time()
    result = VectoriseBacktestService.handle_backtesting_api(
        parsed_strategy_json,
        backtest_period,
        strategy_hash,
        end_date,
        false  # live_execution = false
    )
    execution_time = time() - start_time
    
    if result === nothing
        println("  ‚úó Strategy execution returned nothing")
        exit(1)
    end
    
    # Validate result structure
    required_keys = ["returns", "dates", "profile_history"]
    for key in required_keys
        if !haskey(result, key)
            println("  ‚úó Missing key in result: $key")
            exit(1)
        end
    end
    
    println("  ‚úì Strategy executed successfully")
    println("  ‚úì Execution time: $(round(execution_time, digits=3)) seconds")
    println("  ‚úì Generated $(length(result["returns"])) return points")
    println("  ‚úì Date range: $(result["dates"][1]) to $(result["dates"][end])")
    
    if length(result["returns"]) > 0
        println("  ‚úì Final return: $(round(result["returns"][end], digits=6))")
    end
    
catch e
    println("  ‚úó Strategy execution failed: $e")
    println("     Error details: $e")
    exit(1)
end

# Test 5: Cache validation
println("\n5. Testing cache generation...")
try
    strategy_hash = parsed_strategy_data["hash"] * "_test"
    cache_dir = "Cache/$strategy_hash"
    
    if isdir(cache_dir)
        println("  ‚úì Cache directory created: $cache_dir")
        
        cache_file = "$cache_dir/$strategy_hash.json"
        if isfile(cache_file)
            println("  ‚úì Cache file created: $cache_file")
        else
            println("  ‚ö†Ô∏è  Cache file not found (may be normal)")
        end
    else
        println("  ‚ö†Ô∏è  Cache directory not created (may be normal)")
    end
    
    if isdir("SubtreeCache")
        println("  ‚úì SubtreeCache directory exists")
    else
        println("  ‚ö†Ô∏è  SubtreeCache directory not found")
    end
    
catch e
    println("  ‚ö†Ô∏è  Cache validation error: $e")
end

println("\n" * "="^60)
println("üéâ SMALLSTRATEGY VALIDATION COMPLETED SUCCESSFULLY!")
println("="^60)
println("\nThe SmallStrategy.json implementation is working correctly!")
println("\nKey validations passed:")
println("  ‚úÖ File structure is correct")
println("  ‚úÖ JSON parsing works properly")
println("  ‚úÖ Main module loads successfully")
println("  ‚úÖ Strategy execution completes successfully")
println("  ‚úÖ Results are generated in expected format")
println("\nYou can now run the full test suite with confidence!")